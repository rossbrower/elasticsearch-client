//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGetString(string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetStringAsync(string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePostString(string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostStringAsync(string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = "/_search/template";
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(string index, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(string index, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(string index, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(string index, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(string index, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(string index, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGetString(string index, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetStringAsync(string index, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(string index, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(string index, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(string index, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(string index, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(string index, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(string index, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePostString(string index, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostStringAsync(string index, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/template", index);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(string index, string type, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(string index, string type, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(string index, string type, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(string index, string type, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGet(string index, string type, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetAsync(string index, string type, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplateGetString(string index, string type, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplateGetStringAsync(string index, string type, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(string index, string type, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(string index, string type, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(string index, string type, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(string index, string type, Stream body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePost(string index, string type, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostAsync(string index, string type, Byte[] body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchTemplatePostString(string index, string type, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition template and its params</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchTemplatePostStringAsync(string index, string type, string body, Func<SearchTemplateParameters, SearchTemplateParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/template", index, type);
            if ((options != null))
            {
                SearchTemplateParameters parameters = options.Invoke(new SearchTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
