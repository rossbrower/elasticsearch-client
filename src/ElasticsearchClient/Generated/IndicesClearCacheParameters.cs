//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public class IndicesClearCacheParameters : Parameters
    {
        
        /// <summary>Clear field data</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters field_data(bool value)
        {
            this.SetValue("field_data", value.ToString().ToLower());
            return this;
        }
        
        /// <summary>Clear field data</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters fielddata(bool value)
        {
            this.SetValue("fielddata", value.ToString().ToLower());
            return this;
        }
        
        /// <summary>A comma-separated list of fields to clear when using the `field_data` parameter (default: all)</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters fields(string value)
        {
            this.SetValue("fields", value);
            return this;
        }
        
        /// <summary>Clear query caches</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters query(bool value)
        {
            this.SetValue("query", value.ToString().ToLower());
            return this;
        }
        
        /// <summary>Whether specified concrete indices should be ignored when unavailable (missing or closed)</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters ignore_unavailable(bool value)
        {
            this.SetValue("ignore_unavailable", value.ToString().ToLower());
            return this;
        }
        
        /// <summary>Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters allow_no_indices(bool value)
        {
            this.SetValue("allow_no_indices", value.ToString().ToLower());
            return this;
        }
        
        /// <summary>Whether to expand wildcard expression to concrete indices that are open, closed or both.</summary>
        /// <param name="value"><para>Options: open,closed,none,all</para><para>Default: open</para></param>
        public virtual IndicesClearCacheParameters expand_wildcards(string value)
        {
            this.SetValue("expand_wildcards", value);
            return this;
        }
        
        /// <summary>A comma-separated list of index name to limit the operation</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters index(string value)
        {
            this.SetValue("index", value);
            return this;
        }
        
        /// <summary>Clear the recycler cache</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters recycler(bool value)
        {
            this.SetValue("recycler", value.ToString().ToLower());
            return this;
        }
        
        /// <summary>Clear request cache</summary>
        /// <param name="value"></param>
        public virtual IndicesClearCacheParameters request(bool value)
        {
            this.SetValue("request", value.ToString().ToLower());
            return this;
        }
    }
}
