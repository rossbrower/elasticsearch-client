//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/_termvectors", index, type);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string id, Stream body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string id, Stream body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string id, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string id, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string id, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string id, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string id, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string id, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string id, string body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string id, string body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsGet(string index, string type, string id, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsGetAsync(string index, string type, string id, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string id, Stream body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string id, Stream body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string id, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string id, Stream body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string id, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string id, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string id, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string id, Byte[] body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string id, string body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string id, string body)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TermvectorsPost(string index, string type, string id, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html"/></summary>
        /// <param name="index">The index in which the document resides.</param>
        /// <param name="type">The type of the document.</param>
        /// <param name="id">The id of the document, when not specified a doc param should be supplied.</param>
        /// <param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TermvectorsPostAsync(string index, string type, string id, string body, Func<TermvectorsParameters, TermvectorsParameters> options)
        {
            string uri = string.Format("/{0}/{1}/{2}/_termvectors", index, type, id);
            TermvectorsParameters parameters = options.Invoke(new TermvectorsParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
