//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGetString(string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetStringAsync(string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPostString(string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostStringAsync(string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = "/_validate/query";
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(string index, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(string index, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(string index, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(string index, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(string index, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(string index, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGetString(string index, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetStringAsync(string index, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(string index, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(string index, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(string index, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(string index, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(string index, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(string index, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPostString(string index, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostStringAsync(string index, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/_validate/query", index);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(string index, string type, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(string index, string type, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(string index, string type, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(string index, string type, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGet(string index, string type, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetAsync(string index, string type, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryGetString(string index, string type, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryGetStringAsync(string index, string type, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(string index, string type, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(string index, string type, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(string index, string type, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(string index, string type, Stream body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPost(string index, string type, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostAsync(string index, string type, Byte[] body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IndicesValidateQueryPostString(string index, string type, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html"/></summary>
        /// <param name="index">A comma-separated list of index names to restrict the operation; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
        /// <param name="body">The query definition specified with the Query DSL</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IndicesValidateQueryPostStringAsync(string index, string type, string body, Func<IndicesValidateQueryParameters, IndicesValidateQueryParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_validate/query", index, type);
            if ((options != null))
            {
                IndicesValidateQueryParameters parameters = options.Invoke(new IndicesValidateQueryParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
