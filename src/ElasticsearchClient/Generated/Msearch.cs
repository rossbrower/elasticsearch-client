//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGet(Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetAsync(Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGet(Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetAsync(Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGetString(string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetStringAsync(string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPost(Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostAsync(Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPost(Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostAsync(Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPostString(string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostStringAsync(string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = "/_msearch";
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGet(string index, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetAsync(string index, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGet(string index, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetAsync(string index, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGetString(string index, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetStringAsync(string index, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPost(string index, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostAsync(string index, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPost(string index, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostAsync(string index, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPostString(string index, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostStringAsync(string index, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch", index);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGet(string index, string type, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetAsync(string index, string type, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGet(string index, string type, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetAsync(string index, string type, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchGetString(string index, string type, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchGetStringAsync(string index, string type, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPost(string index, string type, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostAsync(string index, string type, Stream body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPost(string index, string type, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostAsync(string index, string type, Byte[] body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage MsearchPostString(string index, string type, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/2.3/search-multi-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> MsearchPostStringAsync(string index, string type, string body, Func<MsearchParameters, MsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch", index, type);
            if ((options != null))
            {
                MsearchParameters parameters = options.Invoke(new MsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
    }
}
