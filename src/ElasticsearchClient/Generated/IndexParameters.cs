//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public class IndexParameters : Parameters
    {
        
        /// <summary>Explicit write consistency setting for the operation</summary>
        /// <param name="value"><para>Options: one,quorum,all</para></param>
        public virtual IndexParameters consistency(string value)
        {
            this.SetValue("consistency", value);
            return this;
        }
        
        /// <summary>Explicit operation type</summary>
        /// <param name="value"><para>Options: index,create</para><para>Default: index</para></param>
        public virtual IndexParameters op_type(string value)
        {
            this.SetValue("op_type", value);
            return this;
        }
        
        /// <summary>ID of the parent document</summary>
        /// <param name="value"></param>
        public virtual IndexParameters parent(string value)
        {
            this.SetValue("parent", value);
            return this;
        }
        
        /// <summary>If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.</summary>
        /// <param name="value"><para>Options: true,false,wait_for</para></param>
        public virtual IndexParameters refresh(string value)
        {
            this.SetValue("refresh", value);
            return this;
        }
        
        /// <summary>Specific routing value</summary>
        /// <param name="value"></param>
        public virtual IndexParameters routing(string value)
        {
            this.SetValue("routing", value);
            return this;
        }
        
        /// <summary>Explicit operation timeout</summary>
        /// <param name="value"></param>
        public virtual IndexParameters timeout(string value)
        {
            this.SetValue("timeout", value);
            return this;
        }
        
        /// <summary>Explicit timestamp for the document</summary>
        /// <param name="value"></param>
        public virtual IndexParameters timestamp(string value)
        {
            this.SetValue("timestamp", value);
            return this;
        }
        
        /// <summary>Expiration time for the document</summary>
        /// <param name="value"></param>
        public virtual IndexParameters ttl(string value)
        {
            this.SetValue("ttl", value);
            return this;
        }
        
        /// <summary>Explicit version number for concurrency control</summary>
        /// <param name="value"></param>
        public virtual IndexParameters version(long value)
        {
            this.SetValue("version", value);
            return this;
        }
        
        /// <summary>Specific version type</summary>
        /// <param name="value"><para>Options: internal,external,external_gte,force</para></param>
        public virtual IndexParameters version_type(string value)
        {
            this.SetValue("version_type", value);
            return this;
        }
        
        /// <summary>The pipeline id to preprocess incoming documents with</summary>
        /// <param name="value"></param>
        public virtual IndexParameters pipeline(string value)
        {
            this.SetValue("pipeline", value);
            return this;
        }
    }
}
