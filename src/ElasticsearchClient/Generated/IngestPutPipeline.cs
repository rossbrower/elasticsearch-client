//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html"/></summary>
        /// <param name="id">Pipeline ID</param>
        /// <param name="body">The ingest definition</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IngestPutPipeline(string id, Stream body, Func<IngestPutPipelineParameters, IngestPutPipelineParameters> options = null)
        {
            string uri = string.Format("/_ingest/pipeline/{0}", id);
            if ((options != null))
            {
                IngestPutPipelineParameters parameters = options.Invoke(new IngestPutPipelineParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html"/></summary>
        /// <param name="id">Pipeline ID</param>
        /// <param name="body">The ingest definition</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IngestPutPipelineAsync(string id, Stream body, Func<IngestPutPipelineParameters, IngestPutPipelineParameters> options = null)
        {
            string uri = string.Format("/_ingest/pipeline/{0}", id);
            if ((options != null))
            {
                IngestPutPipelineParameters parameters = options.Invoke(new IngestPutPipelineParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html"/></summary>
        /// <param name="id">Pipeline ID</param>
        /// <param name="body">The ingest definition</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IngestPutPipeline(string id, Byte[] body, Func<IngestPutPipelineParameters, IngestPutPipelineParameters> options = null)
        {
            string uri = string.Format("/_ingest/pipeline/{0}", id);
            if ((options != null))
            {
                IngestPutPipelineParameters parameters = options.Invoke(new IngestPutPipelineParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html"/></summary>
        /// <param name="id">Pipeline ID</param>
        /// <param name="body">The ingest definition</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IngestPutPipelineAsync(string id, Byte[] body, Func<IngestPutPipelineParameters, IngestPutPipelineParameters> options = null)
        {
            string uri = string.Format("/_ingest/pipeline/{0}", id);
            if ((options != null))
            {
                IngestPutPipelineParameters parameters = options.Invoke(new IngestPutPipelineParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html"/></summary>
        /// <param name="id">Pipeline ID</param>
        /// <param name="body">The ingest definition</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage IngestPutPipelineString(string id, string body, Func<IngestPutPipelineParameters, IngestPutPipelineParameters> options = null)
        {
            string uri = string.Format("/_ingest/pipeline/{0}", id);
            if ((options != null))
            {
                IngestPutPipelineParameters parameters = options.Invoke(new IngestPutPipelineParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html"/></summary>
        /// <param name="id">Pipeline ID</param>
        /// <param name="body">The ingest definition</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> IngestPutPipelineStringAsync(string id, string body, Func<IngestPutPipelineParameters, IngestPutPipelineParameters> options = null)
        {
            string uri = string.Format("/_ingest/pipeline/{0}", id);
            if ((options != null))
            {
                IngestPutPipelineParameters parameters = options.Invoke(new IngestPutPipelineParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("PUT", uri, body);
        }
    }
}
