//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        public virtual HttpResponseMessage NodesInfo()
        {
            string uri = "/_nodes";
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        public virtual async Task<HttpResponseMessage> NodesInfoAsync()
        {
            string uri = "/_nodes";
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage NodesInfo(Func<NodesInfoParameters, NodesInfoParameters> options)
        {
            string uri = "/_nodes";
            NodesInfoParameters parameters = options.Invoke(new NodesInfoParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> NodesInfoAsync(Func<NodesInfoParameters, NodesInfoParameters> options)
        {
            string uri = "/_nodes";
            NodesInfoParameters parameters = options.Invoke(new NodesInfoParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        public virtual HttpResponseMessage NodesInfo(string node_id)
        {
            string uri = string.Format("/_nodes/{0}", node_id);
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        public virtual async Task<HttpResponseMessage> NodesInfoAsync(string node_id)
        {
            string uri = string.Format("/_nodes/{0}", node_id);
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage NodesInfo(string node_id, Func<NodesInfoParameters, NodesInfoParameters> options)
        {
            string uri = string.Format("/_nodes/{0}", node_id);
            NodesInfoParameters parameters = options.Invoke(new NodesInfoParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> NodesInfoAsync(string node_id, Func<NodesInfoParameters, NodesInfoParameters> options)
        {
            string uri = string.Format("/_nodes/{0}", node_id);
            NodesInfoParameters parameters = options.Invoke(new NodesInfoParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        /// <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
        public virtual HttpResponseMessage NodesInfo(string node_id, string metric)
        {
            string uri = string.Format("/_nodes/{0}/{1}", node_id, metric);
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        /// <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
        public virtual async Task<HttpResponseMessage> NodesInfoAsync(string node_id, string metric)
        {
            string uri = string.Format("/_nodes/{0}/{1}", node_id, metric);
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        /// <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage NodesInfo(string node_id, string metric, Func<NodesInfoParameters, NodesInfoParameters> options)
        {
            string uri = string.Format("/_nodes/{0}/{1}", node_id, metric);
            NodesInfoParameters parameters = options.Invoke(new NodesInfoParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html"/></summary>
        /// <param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes</param>
        /// <param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> NodesInfoAsync(string node_id, string metric, Func<NodesInfoParameters, NodesInfoParameters> options)
        {
            string uri = string.Format("/_nodes/{0}/{1}", node_id, metric);
            NodesInfoParameters parameters = options.Invoke(new NodesInfoParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri);
        }
    }
}
