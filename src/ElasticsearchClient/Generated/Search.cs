//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(Stream body)
        {
            string uri = "/_search";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(Stream body)
        {
            string uri = "/_search";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(Byte[] body)
        {
            string uri = "/_search";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(Byte[] body)
        {
            string uri = "/_search";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string body)
        {
            string uri = "/_search";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string body)
        {
            string uri = "/_search";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(Stream body)
        {
            string uri = "/_search";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(Stream body)
        {
            string uri = "/_search";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(Byte[] body)
        {
            string uri = "/_search";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(Byte[] body)
        {
            string uri = "/_search";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string body)
        {
            string uri = "/_search";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string body)
        {
            string uri = "/_search";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string index, Stream body)
        {
            string uri = string.Format("/{0}/_search", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string index, Stream body)
        {
            string uri = string.Format("/{0}/_search", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_search", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_search", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string index, string body)
        {
            string uri = string.Format("/{0}/_search", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string index, string body)
        {
            string uri = string.Format("/{0}/_search", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string index, Stream body)
        {
            string uri = string.Format("/{0}/_search", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string index, Stream body)
        {
            string uri = string.Format("/{0}/_search", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_search", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_search", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string index, string body)
        {
            string uri = string.Format("/{0}/_search", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string index, string body)
        {
            string uri = string.Format("/{0}/_search", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchGet(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchGetAsync(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private HttpResponseMessage SearchPost(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html"/></summary>
        /// <param name="index">A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
        /// <param name="body">The search definition using the Query DSL</param>
        private async Task<HttpResponseMessage> SearchPostAsync(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_search", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
