//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzeGet(Stream body)
        {
            string uri = "/_analyze";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(Stream body)
        {
            string uri = "/_analyze";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzeGet(Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzeGet(Byte[] body)
        {
            string uri = "/_analyze";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(Byte[] body)
        {
            string uri = "/_analyze";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzeGet(Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzeGet(string body)
        {
            string uri = "/_analyze";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string body)
        {
            string uri = "/_analyze";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzeGet(string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzePost(Stream body)
        {
            string uri = "/_analyze";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(Stream body)
        {
            string uri = "/_analyze";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzePost(Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzePost(Byte[] body)
        {
            string uri = "/_analyze";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(Byte[] body)
        {
            string uri = "/_analyze";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzePost(Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzePost(string body)
        {
            string uri = "/_analyze";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string body)
        {
            string uri = "/_analyze";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzePost(string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = "/_analyze";
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzeGet(string index, Stream body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string index, Stream body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzeGet(string index, Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string index, Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzeGet(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzeGet(string index, Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string index, Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzeGet(string index, string body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string index, string body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzeGet(string index, string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzeGetAsync(string index, string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzePost(string index, Stream body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string index, Stream body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzePost(string index, Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string index, Stream body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzePost(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzePost(string index, Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string index, Byte[] body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private HttpResponseMessage IndicesAnalyzePost(string index, string body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string index, string body)
        {
            string uri = string.Format("/{0}/_analyze", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private HttpResponseMessage IndicesAnalyzePost(string index, string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html"/></summary>
        /// <param name="index">The name of the index to scope the operation</param>
        /// <param name="body">The text on which the analysis should be performed</param>
        /// <param name="options">The function to set optional url parameters.</param>
        private async Task<HttpResponseMessage> IndicesAnalyzePostAsync(string index, string body, Func<IndicesAnalyzeParameters, IndicesAnalyzeParameters> options)
        {
            string uri = string.Format("/{0}/_analyze", index);
            IndicesAnalyzeParameters parameters = options.Invoke(new IndicesAnalyzeParameters());
            uri = parameters.GetUri(uri);
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
