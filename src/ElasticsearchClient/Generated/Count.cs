//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPostString(string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostStringAsync(string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGetString(string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetStringAsync(string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = "/_count";
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(string index, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(string index, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(string index, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(string index, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(string index, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(string index, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPostString(string index, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostStringAsync(string index, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(string index, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(string index, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(string index, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(string index, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(string index, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(string index, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGetString(string index, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetStringAsync(string index, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/_count", index);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(string index, string type, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(string index, string type, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(string index, string type, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(string index, string type, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPost(string index, string type, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostAsync(string index, string type, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountPostString(string index, string type, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountPostStringAsync(string index, string type, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(string index, string type, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(string index, string type, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(string index, string type, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(string index, string type, Stream body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGet(string index, string type, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetAsync(string index, string type, Byte[] body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage CountGetString(string index, string type, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> CountGetStringAsync(string index, string type, string body, Func<CountParameters, CountParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_count", index, type);
            if ((options != null))
            {
                CountParameters parameters = options.Invoke(new CountParameters());
                uri = parameters.GetUri(uri);
            }
            return await this.ExecuteAsync("GET", uri, body);
        }
    }
}
