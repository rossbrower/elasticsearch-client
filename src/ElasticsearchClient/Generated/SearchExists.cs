//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPostString(string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostStringAsync(string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGetString(string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetStringAsync(string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = "/_search/exists";
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(string index, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(string index, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(string index, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(string index, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(string index, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(string index, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPostString(string index, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostStringAsync(string index, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(string index, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(string index, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(string index, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(string index, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(string index, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(string index, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGetString(string index, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetStringAsync(string index, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/_search/exists", index);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(string index, string type, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(string index, string type, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(string index, string type, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(string index, string type, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPost(string index, string type, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostAsync(string index, string type, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsPostString(string index, string type, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsPostStringAsync(string index, string type, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(string index, string type, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(string index, string type, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(string index, string type, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(string index, string type, Stream body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGet(string index, string type, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetAsync(string index, string type, Byte[] body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage SearchExistsGetString(string index, string type, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-exists.html"/></summary>
        /// <param name="index">A comma-separated list of indices to restrict the results</param>
        /// <param name="type">A comma-separated list of types to restrict the results</param>
        /// <param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> SearchExistsGetStringAsync(string index, string type, string body, Func<SearchExistsParameters, SearchExistsParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_search/exists", index, type);
            if ((options != null))
            {
                SearchExistsParameters parameters = options.Invoke(new SearchExistsParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
    }
}
