//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage PutTemplatePut(string id, Stream body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> PutTemplatePutAsync(string id, Stream body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage PutTemplatePut(string id, Byte[] body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> PutTemplatePutAsync(string id, Byte[] body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage PutTemplatePutString(string id, string body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> PutTemplatePutStringAsync(string id, string body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage PutTemplatePost(string id, Stream body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> PutTemplatePostAsync(string id, Stream body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage PutTemplatePost(string id, Byte[] body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> PutTemplatePostAsync(string id, Byte[] body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage PutTemplatePostString(string id, string body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html"/></summary>
        /// <param name="id">Template ID</param>
        /// <param name="body">The document</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> PutTemplatePostStringAsync(string id, string body, Func<PutTemplateParameters, PutTemplateParameters> options = null)
        {
            string uri = string.Format("/_search/template/{0}", id);
            if ((options != null))
            {
                PutTemplateParameters parameters = options.Invoke(new PutTemplateParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
    }
}
