//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string name, Stream body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string name, Stream body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string name, Byte[] body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string name, Byte[] body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string name, string body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string name, string body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string name, Stream body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string name, Stream body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string name, Byte[] body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string name, Byte[] body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string name, string body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string name, string body)
        {
            string uri = string.Format("/_warmer/{0}", name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string index, string name, Stream body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string index, string name, Stream body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string index, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string index, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string index, string name, string body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string index, string name, string body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string index, string name, Stream body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string index, string name, Stream body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string index, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string index, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string index, string name, string body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string index, string name, string body)
        {
            string uri = string.Format("/{0}/_warmer/{1}", index, name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string index, string type, string name, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string index, string type, string name, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string index, string type, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string index, string type, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPut(string index, string type, string name, string body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return this.Execute("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPutAsync(string index, string type, string name, string body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return await this.ExecuteAsync("PUT", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string index, string type, string name, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string index, string type, string name, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string index, string type, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string index, string type, string name, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private HttpResponseMessage IndicesPutWarmerPost(string index, string type, string name, string body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-warmers.html"/></summary>
        /// <param name="index">A comma-separated list of index names to register the warmer for; use `_all` or omit to perform the operation on all indices</param>
        /// <param name="type">A comma-separated list of document types to register the warmer for; leave empty to perform the operation on all types</param>
        /// <param name="name">The name of the warmer</param>
        /// <param name="body">The search request definition for the warmer (query, filters, facets, sorting, etc)</param>
        private async Task<HttpResponseMessage> IndicesPutWarmerPostAsync(string index, string type, string name, string body)
        {
            string uri = string.Format("/{0}/{1}/_warmer/{2}", index, type, name);
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
