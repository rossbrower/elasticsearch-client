//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(Stream body)
        {
            string uri = "/_mpercolate";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(Stream body)
        {
            string uri = "/_mpercolate";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(Byte[] body)
        {
            string uri = "/_mpercolate";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(Byte[] body)
        {
            string uri = "/_mpercolate";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string body)
        {
            string uri = "/_mpercolate";
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string body)
        {
            string uri = "/_mpercolate";
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(Stream body)
        {
            string uri = "/_mpercolate";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(Stream body)
        {
            string uri = "/_mpercolate";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(Byte[] body)
        {
            string uri = "/_mpercolate";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(Byte[] body)
        {
            string uri = "/_mpercolate";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string body)
        {
            string uri = "/_mpercolate";
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string body)
        {
            string uri = "/_mpercolate";
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string index, Stream body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string index, Stream body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string index, string body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string index, string body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string index, Stream body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string index, Stream body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string index, Byte[] body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string index, string body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string index, string body)
        {
            string uri = string.Format("/{0}/_mpercolate", index);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolateGet(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return this.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolateGetAsync(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return await this.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string index, string type, Stream body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string index, string type, Byte[] body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private HttpResponseMessage MpercolatePost(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return this.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/master/search-percolate.html"/></summary>
        /// <param name="index">The index of the document being count percolated to use as default</param>
        /// <param name="type">The type of the document being percolated to use as default.</param>
        /// <param name="body">The percolate request definitions (header & body pair), separated by newlines</param>
        private async Task<HttpResponseMessage> MpercolatePostAsync(string index, string type, string body)
        {
            string uri = string.Format("/{0}/{1}/_mpercolate", index, type);
            return await this.ExecuteAsync("POST", uri, body);
        }
    }
}
