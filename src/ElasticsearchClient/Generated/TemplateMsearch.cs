//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Elasticsearch.Client
{
    using System;
    using System.IO;
    using System.Net;
    using System.Net.Http;
    using System.Threading.Tasks;
    
    
    public partial class ElasticsearchClient
    {
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGet(Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetAsync(Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGet(Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetAsync(Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGetString(string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetStringAsync(string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPost(Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostAsync(Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPost(Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostAsync(Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPostString(string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostStringAsync(string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = "/_msearch/template";
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGet(string index, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetAsync(string index, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGet(string index, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetAsync(string index, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGetString(string index, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetStringAsync(string index, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPost(string index, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostAsync(string index, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPost(string index, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostAsync(string index, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPostString(string index, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostStringAsync(string index, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/_msearch/template", index);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGet(string index, string type, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetAsync(string index, string type, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGet(string index, string type, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetAsync(string index, string type, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchGetString(string index, string type, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchGetStringAsync(string index, string type, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("GET", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPost(string index, string type, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostAsync(string index, string type, Stream body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPost(string index, string type, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostAsync(string index, string type, Byte[] body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual HttpResponseMessage TemplateMsearchPostString(string index, string type, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return mConnection.Execute("POST", uri, body);
        }
        
        /// <summary><see href="http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html"/></summary>
        /// <param name="index">A comma-separated list of index names to use as default</param>
        /// <param name="type">A comma-separated list of document types to use as default</param>
        /// <param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
        /// <param name="options">The function to set optional url parameters.</param>
        public virtual async Task<HttpResponseMessage> TemplateMsearchPostStringAsync(string index, string type, string body, Func<TemplateMsearchParameters, TemplateMsearchParameters> options = null)
        {
            string uri = string.Format("/{0}/{1}/_msearch/template", index, type);
            if ((options != null))
            {
                TemplateMsearchParameters parameters = options.Invoke(new TemplateMsearchParameters());
                uri = parameters.GetUri(uri);
            }
            return await mConnection.ExecuteAsync("POST", uri, body);
        }
    }
}
